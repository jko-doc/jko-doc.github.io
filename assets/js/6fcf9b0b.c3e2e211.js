"use strict";(self.webpackChunkjko_doc=self.webpackChunkjko_doc||[]).push([[247],{589:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/jko-function-env-d472601d5a46e8d5e2dd9695daaa4a69.png"},5026:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"usage/environment","title":"Environment","description":"With each execution, jko creates an Independent environment\u2014an entirely new instance that derives from either the system environment or the parent process environment.","source":"@site/docs/usage/environment.mdx","sourceDirName":"usage","slug":"/usage/environment","permalink":"/usage/environment","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3,"keywords":["environment",".env file","shared environment","independent environment","environment variables"]},"sidebar":"tutorialSidebar","previous":{"title":"Chaining Function Scripts","permalink":"/usage/functions/chaining-function-script"},"next":{"title":"Install dependencies","permalink":"/usage/install"}}');var i=r(4848),t=r(8453),c=r(8070);r(6502);const o={sidebar_position:3,keywords:["environment",".env file","shared environment","independent environment","environment variables"]},a="Environment",l={},d=[{value:"Shared Environments",id:"shared-environments",level:2},{value:"Enhancing Process Environment",id:"enhancing-process-environment",level:2},{value:"Additional Environment Variables",id:"additional-environment-variables",level:2},{value:"Summary",id:"summary",level:2}];function h(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",header:"header",hr:"hr",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:s}=n;return s||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"environment",children:"Environment"})}),"\n",(0,i.jsxs)(n.p,{children:["With each execution, ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"jko"})})," creates an ",(0,i.jsx)("u",{children:"Independent environment"}),"\u2014an entirely new instance that derives from either the system environment or the parent process environment.\nThe environment variables can be reached in various contexts:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Function scripts: ",(0,i.jsx)(n.code,{children:"process.env.NAME"})]}),"\n",(0,i.jsxs)(n.li,{children:["Traditional scripts: ",(0,i.jsx)(n.code,{children:"$NAME"})]}),"\n",(0,i.jsxs)(n.li,{children:["Other processes: through mechanisms specific to each process (e.g., a Node.js process uses ",(0,i.jsx)(n.code,{children:"process.env.NAME"}),")"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScriptA: function (param1, param2) {\n        console.log('functionScriptA')\n        process.env.jko_return_0 = `1. ${param1}_${param2}`\n        return 'functionScriptB'\n      },\n      functionScriptB: function (param1, param2) {\n        console.log('functionScriptB')\n        process.env.jko_return_1 = `2. ${param1}_${param2}`\n        return 'scriptC'\n      },\n      scriptC: 'echo scriptC: $jko_arg_0, $jko_return_0, $jko_return_1',\n      scriptD: 'jko functionScriptA 2 3 && jko scriptC'\n    }\n  }\n"})}),"\n",(0,i.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, must add ",(0,i.jsx)(n.code,{children:"-l=e"})," options to all ",(0,i.jsx)(n.code,{children:"jko"})," executions)"]}),"\n",(0,i.jsx)(n.p,{children:"When executed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"$ jko scriptD\n$ functionScriptA\n$ functionScriptB\n$ scriptC: 2, 1. 2_3, 2. 2_3\n$ scriptC: , ,\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"scriptD"})," chains two processes: ",(0,i.jsx)(n.code,{children:"jko functionScriptA 2 3"})," and ",(0,i.jsx)(n.code,{children:"jko scriptC"}),"."]}),"\n",(0,i.jsx)(n.p,{children:'Each execution creates an "Independent" environment:'}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In the first execution, being a chaining, the environment is shared, so when the tail script is invoked, it receives all the values. That's why you see ",(0,i.jsx)(n.code,{children:"scriptC: 2, 1. 2_3, 2. 2_3"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:['In the second execution, which operates in an "Independent" environment, both ',(0,i.jsx)(n.code,{children:"jko_return_0"})," and ",(0,i.jsx)(n.code,{children:"jko_return_1"})," are empty. As a result, the output is ",(0,i.jsx)(n.code,{children:"scriptC: , ,"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(9055).A+"",width:"541",height:"351"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's change a few lines in ",(0,i.jsx)(n.code,{children:"functionScriptA"})," and ",(0,i.jsx)(n.code,{children:"scriptD"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScriptA: function (param1, param2) {\n        console.log('functionScriptA')\n        process.env.jko_return_0 = `1. ${param1}_${param2}`\n        // highlight-next-line\n        return 'scriptD'\n      },\n      functionScriptB: function (param1, param2) {\n        console.log('functionScriptB')\n        process.env.jko_return_1 = `2. ${param1}_${param2}`\n        return 'scriptC'\n      },\n      scriptC: 'echo scriptC: $jko_arg_0, $jko_return_0, $jko_return_1',\n        // highlight-next-line\n      scriptD: 'jko functionScriptB && jko scriptC',\n    }\n  }\n"})}),"\n",(0,i.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, must add ",(0,i.jsx)(n.code,{children:"-l=e"})," options to all ",(0,i.jsx)(n.code,{children:"jko"})," executions)"]}),"\n",(0,i.jsx)(n.p,{children:"When executed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"$ jko functionScriptA 2 3\n$ functionScriptA\n$ functionScriptB\n$ scriptC: 2, 1. 2_3, 2. undefined_undefined\n$ scriptC: 2, 1. 2_3,\n"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Shared Environment Creation:"})}),"\n",(0,i.jsxs)(n.p,{children:["Executing ",(0,i.jsx)(n.code,{children:"jko functionScriptA 2 3"})," creates a ",(0,i.jsx)(n.strong,{children:"Shared environment"})," used by the two ",(0,i.jsx)("u",{children:"chained processes"})," ",(0,i.jsx)(n.code,{children:"jko functionScriptB"})," and ",(0,i.jsx)(n.code,{children:"jko scriptC"}),", and also by their descendants."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["In this process, ",(0,i.jsx)(n.code,{children:"jko_return_0"})," becomes available to both."]}),"\n",(0,i.jsxs)(n.li,{children:["However, both ",(0,i.jsx)(n.code,{children:"jko functionScriptB"})," and ",(0,i.jsx)(n.code,{children:"jko scriptC"})," operate within their own ",(0,i.jsx)(n.strong,{children:"Independent environments"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Argument Availability:"})}),"\n",(0,i.jsxs)(n.p,{children:["Although the arguments ",(0,i.jsx)(n.code,{children:"2"})," and ",(0,i.jsx)(n.code,{children:"3"})," are available in ",(0,i.jsx)(n.code,{children:"scriptD"}),", they are not accessible to ",(0,i.jsx)(n.code,{children:"functionScriptB"}),". This is why the output displays ",(0,i.jsx)(n.code,{children:"undefined"})," for those values (",(0,i.jsx)(n.code,{children:"scriptC: 2, 1. 2_3, 2. undefined_undefined"}),")."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Nevertheless, ",(0,i.jsx)(n.code,{children:"jko_arg_0"})," and ",(0,i.jsx)(n.code,{children:"jko_arg_1"})," belong to the ",(0,i.jsx)(n.strong,{children:"Shared environment"})," and remain available."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["Additionally, ",(0,i.jsx)(n.code,{children:"jko_return_1"})," is defined in the ",(0,i.jsx)(n.code,{children:"functionScriptB"})," ",(0,i.jsx)(n.strong,{children:"Independent environment"})," and is not accessible to the initial ",(0,i.jsx)(n.code,{children:"scriptC"}),". This is why the output appears as: ",(0,i.jsx)(n.code,{children:"scriptC: 2, 1. 2_3,"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(5492).A+"",width:"541",height:"342"})}),"\n",(0,i.jsxs)(n.p,{children:["Let's change a line in ",(0,i.jsx)(n.code,{children:"functionScriptB"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScriptA: function (param1, param2) {\n        console.log('functionScriptA')\n        process.env.jko_return_0 = `1. ${param1}_${param2}`\n        return 'scriptD'\n      },\n      functionScriptB: function () {\n        console.log('functionScriptB')\n        // highlight-next-line\n        process.env.jko_return_1 = `2. ${process.env.jko_arg_0}_${process.env.jko_arg_1}`\n        return 'scriptC'\n      },\n      scriptC: 'echo scriptC: $jko_arg_0, $jko_return_0, $jko_return_1',\n      scriptD: 'jko functionScriptB && jko scriptC',\n    }\n  }\n"})}),"\n",(0,i.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, must add ",(0,i.jsx)(n.code,{children:"-l=e"})," options to all ",(0,i.jsx)(n.code,{children:"jko"})," executions)"]}),"\n",(0,i.jsx)(n.p,{children:"When executed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"$ jko functionScriptA 2 3\n$ functionScriptA\n$ functionScriptB\n$ scriptC: 2, 1. 2_3, 2. 2_3\n$ scriptC: 2, 1. 2_3,\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Using ",(0,i.jsx)(n.code,{children:"jko_arg_0"})," and ",(0,i.jsx)(n.code,{children:"jko_arg_1"}),", which belong to the ",(0,i.jsx)(n.strong,{children:"Shared environment"}),", allows ",(0,i.jsx)(n.code,{children:"functionScriptB"})," to access to original arguments."]}),"\n",(0,i.jsx)(n.h2,{id:"shared-environments",children:"Shared Environments"}),"\n",(0,i.jsxs)(n.p,{children:["Chained processes share a ",(0,i.jsx)(n.strong,{children:"common environment"}),". As a result:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"The environment variables holding the initial arguments are accessible in every script."}),"\n",(0,i.jsx)(n.li,{children:"Newly added environment variables are available to subsequent scripts after their definition."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Review the following image that demonstrates how the environment evolves during the chaining calls:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:r(589).A+"",width:"593",height:"239"})}),"\n",(0,i.jsx)(n.p,{children:"See that:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Initial arguments, ",(0,i.jsx)(n.code,{children:"jko_arg_0"}),", ",(0,i.jsx)(n.code,{children:"jko_arg_1"}),", etc. are accessible in every script, ",(0,i.jsx)(n.code,{children:"functionScript1"}),", ",(0,i.jsx)(n.code,{children:"functionScript2"})," and ",(0,i.jsx)(n.code,{children:"functionScript3"}),".","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Furthermore, they can be accessed as parameters these functions."}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko_return_0"})," is accessible to ",(0,i.jsx)(n.code,{children:"functionScript2"})," and ",(0,i.jsx)(n.code,{children:"functionScript3"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko_return_1"})," is accessible to ",(0,i.jsx)(n.code,{children:"functionScript3"}),"."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"For example:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript1: function (param1, param2) {\n        console.log('functionScript1:')\n        console.log(param1 === process.env.jko_arg_0)\n        console.log(param2 === process.env.jko_arg_1)\n        process.env.jko_return_0 = `1. ${process.env.jko_arg_0}_${process.env.jko_arg_1}`\n        return 'functionScript2'\n      },\n      functionScript2: function (param1, param2) {\n        console.log('functionScript2:')\n        console.log(param1 === process.env.jko_arg_0)\n        console.log(param2 === process.env.jko_arg_1)\n        console.log(process.env.jko_return_0 === `1. ${process.env.jko_arg_0}_${process.env.jko_arg_1}`)\n        process.env.jko_return_1 = `2. ${process.env.jko_arg_0}_${process.env.jko_arg_1}`\n        return 'functionScript3'\n      },\n      functionScript3: function (param1, param2) {\n        console.log('functionScript3:')\n        console.log(param1 === process.env.jko_arg_0)\n        console.log(param2 === process.env.jko_arg_1)\n        console.log(process.env.jko_return_0 === `1. ${process.env.jko_arg_0}_${process.env.jko_arg_1}`)\n        console.log(process.env.jko_return_1 === `2. ${process.env.jko_arg_0}_${process.env.jko_arg_1}`)\n        // End of the chaining\n      }\n    }\n  }\n"})}),"\n",(0,i.jsx)(n.p,{children:"When executed:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-powershell",children:"$ jko functionScript1 1 2\n$ functionScript1:\n$ true\n$ true\n$ functionScript2:\n$ true\n$ true\n$ true\n$ functionScript3:\n$ true\n$ true\n$ true\n$ true\n$ jko functionScript2 1 2\n$ functionScript2:\n$ true\n$ true\n$ false\n$ functionScript3:\n$ true\n$ true\n$ false\n$ true\n"})}),"\n",(0,i.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,i.jsx)(n.code,{children:"jko -l=e functionScript1 1 2"}),")"]}),"\n",(0,i.jsx)(n.h2,{id:"enhancing-process-environment",children:"Enhancing Process Environment"}),"\n",(0,i.jsxs)(n.p,{children:["Use ",(0,i.jsx)(n.code,{children:"envFile"})," in ",(0,i.jsx)(n.a,{href:"jkojs",children:(0,i.jsx)(n.code,{children:"jko.js"})})," to specify the path of a ",(0,i.jsx)(n.code,{children:".env"})," file, which provides required environment variables\nto the new instance where the script will run."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"jko.js"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export default {\n  scripts: {\n    yourScript1: \"someCommand\",\n  },\n  envFile: './path/to/.env',\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:".env"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-bash",children:"SOME_ENV_VAR=VALUE1\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Additionally, the ",(0,i.jsx)(n.code,{children:".env"})," file can be specified using the CLI option ",(0,i.jsx)(n.code,{children:"--env-file"}),":"]}),"\n",(0,i.jsx)(c.A,{options:[{prefix:"--",name:"env-file",value:"./path/to/.env"}],scriptName:"yourScript",args:["arg1","separator","argN"]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["command line option ",(0,i.jsx)(n.code,{children:"--env-file"})," takes precedence over ",(0,i.jsx)(n.code,{children:"envFile"}),"."]})}),"\n",(0,i.jsx)(n.h2,{id:"additional-environment-variables",children:"Additional Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:["In addition to generating environment variables for each command-line argument,\n",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"jko"})})," creates environment variables for every field exported by ",(0,i.jsx)(n.code,{children:"jko.js"}),", ",(0,i.jsx)(n.code,{children:"package.json"}),",\nor any configuration file specified via the ",(0,i.jsx)(n.code,{children:"--config-file"})," option \u2014 excluding ",(0,i.jsx)(n.code,{children:"scripts"}),",\n",(0,i.jsx)(n.code,{children:"dependencies"})," and ",(0,i.jsx)(n.code,{children:"devDependencies"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["These environment variables are ",(0,i.jsxs)(n.strong,{children:["generated with a ",(0,i.jsx)(n.code,{children:"jko_"})," prefix"]}),". Additionally, for compatibility reasons, variables prefixed with ",(0,i.jsx)(n.code,{children:"npm_package_"})," are also added."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, using the following ",(0,i.jsx)(n.code,{children:"jko.js"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export default {\n  scripts: {\n    yourScript1: \"someCommand\",\n  },\n  envFile: './path/to/.env',\n  dependencies: {\n    packageName1: \"1.0.0\"\n  },\n  devDependencies: {\n    devPackageName1: \"1.0.0\"\n  },\n  packageManager: 'yarn',\n  logLevel: 'warn',\n  config: {\n    data: ['A', 'B']\n  },\n  version: '1.2.3',\n  name: 'theName'\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"jko"})," will generated the following variables:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko_config_data_0"}),", ",(0,i.jsx)(n.code,{children:"npm_package_config_data_0"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko_config_data_1"}),", ",(0,i.jsx)(n.code,{children:"npm_package_config_data_1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko_config_version"}),", ",(0,i.jsx)(n.code,{children:"npm_package_version"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko_config_name"}),", ",(0,i.jsx)(n.code,{children:"npm_package_name"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"tip",children:[(0,i.jsxs)(n.p,{children:["You can provide default ",(0,i.jsx)(n.code,{children:"jko_arg_"})," values using this mechanism\u2014simply define an ",(0,i.jsx)(n.code,{children:"arg"})," field as an array:"]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"export default {\n  scripts: {\n    yourScript1: \"someCommand\",\n  },\n  arg: ['arg1', 'argN']\n}\n"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsxs)(s,{children:[(0,i.jsx)("summary",{children:"An Expanded Example"}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-javascript",children:"  import { styleText } from 'node:util'\n\n  function combine(letters) {\n    const result = []\n    for(const letter1 of letters)\n      for(const letter2 of letters) {\n        result.push(`${letter1}${letter2}`)\n        for(const letter3 of letters)\n          result.push(`${letter1}${letter2}${letter3}`)\n      }\n    return result\n  }\n\n  const near = new Map([\n    ['q', 'qwa'], ['w', 'wqase'], ['e', 'ewsdr'], ['r', 'redft'], ['t', 'trfgy'], ['y', 'ytghu'],\n    ['u','uyhji'], ['i','iujko'], ['o', 'oiklp'], ['p', 'pol'], ['a', 'aqwsz'], ['s', 'sqazxdew'],\n    ['d', 'dwsxcfre'], ['f', 'fedcvgtr'], ['g', 'grfvbhyt'], ['h', 'htgbjuy'], ['j', 'jyhnmkiu'],\n    ['k', 'kujmloi'], ['l', 'lpok'], ['z', 'zxsa'], ['x', 'xcdsz'], ['c', 'cxdfv'], ['v', 'vcfgb'],\n    ['b', 'bvghn'], ['n', 'nbhjm'], ['m', 'mnjk']\n\n  ])\n\n  function combineNear(letters) {\n    const result = []\n    for(const letter1 of letters) {\n      const neighbor1 = near.get(letter1)\n      for(const letter2 of letters)\n        if (neighbor1.indexOf(letter2) !== -1) {\n          result.push(`${letter1}${letter2}`)\n          const neighbor2 = near.get(letter2)\n          for(const letter3 of letters)\n            if (neighbor1.indexOf(letter3) !== -1 || neighbor2.indexOf(letter3) !== -1)\n              result.push(`${letter1}${letter2}${letter3}`)\n        }\n    }\n    return result\n  }\n\n  function find(arg1, combiner) {\n    console.log(`from: ${arg1}`)\n    const permutations = combiner(arg1)\n    console.log(`time: ~${(permutations.length / 20).toFixed(2)} minutes`)\n    process.env.check_list = JSON.stringify(permutations)\n    return \"start\"\n  }\n  const all = 'qwertyuiopasdfghjklzxcvbnm'\n\n  export default {\n    scripts: {\n      \"find-near\": (arg1) => find(arg1, combineNear),\n      find: (arg1) => find(arg1, combine),\n      \"find-all-near\": () => find(all, combineNear),\n      \"find-all\": () => find(all, combine),\n      iterate: (index, from) => {\n        const n = parseInt(index)\n        const letters = JSON.parse(from)\n        const length = letters.length\n        n != 0 && process.stdout.write(` | ${n}/${length} (${((length - n) / 20).toFixed(2)} m) > `)\n        process.env.check_name = letters[n]\n        process.env.check_list = from\n        process.env.check_n = n + 1\n        return n < length ? \"check\" : \"end\"\n      },\n      start: 'echo -n [ \\\\\"\\\\\"> available.json && echo -n [ \\\\\"\\\\\" > used.json && jko -l=e iterate 0 $check_list',\n      end: \"echo ] >> available.json && echo ] >> used.json\",\n      checkName: \"npm info $jko_arg_0 1>/dev/null 2>/dev/null\",\n      \"$after (checkName)\": function (arg1) {\n        process.stdout.write(`${styleText('red', 'Used:')}${arg1}`)\n      },\n      \"$after ($after (checkName))\": 'echo -n ,\\\\\"$jko_arg_0\\\\\" >> used.json',\n      \"$catch (checkName)\": function (arg1) {\n        process.stdout.write(`${styleText('green', '********* Found: ')}${styleText('bold', arg1)}${styleText('green', ' *********')}`)\n      },\n      \"$after ($catch (checkName))\": 'echo -n ,\\\\\"$jko_arg_0\\\\\" >> available.json',\n      check: \"sleep 1.5 && jko -l=e checkName $check_name && jko -l=e iterate $check_n $check_list\"\n    }\n  }\n"})})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h2,{id:"summary",children:"Summary"}),"\n",(0,i.jsx)(n.admonition,{type:"tip",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Each ",(0,i.jsx)(n.code,{children:"jko"})," execution runs in a new ",(0,i.jsx)(n.strong,{children:"Independent Environment"}),". This environment may belong to a ",(0,i.jsx)(n.strong,{children:"Shared Environment"})," or not, and it is a ",(0,i.jsx)(n.strong,{children:"Shared Environment"})," among its descendant processes."]}),"\n",(0,i.jsxs)(n.li,{children:["Chained function scripts run in a ",(0,i.jsx)(n.strong,{children:"Shared Environment"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["Chained commands in traditional scripts run in a ",(0,i.jsx)(n.strong,{children:"Shared Environment"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"jko"})," introduces custom environment variables with a ",(0,i.jsx)(n.code,{children:"jko_"})," prefix (and, for compatibility, supports variables prefixed with ",(0,i.jsx)(n.code,{children:"npm_package_"}),")."]}),"\n",(0,i.jsxs)(n.li,{children:["Environment variables will be reachable in multiple ways. For function scripts, use ",(0,i.jsx)(n.code,{children:"process.env.NAME"}),"; for traditional scripts, use ",(0,i.jsx)(n.code,{children:"$NAME"}),"; and for other processes, the access method varies."]}),"\n"]})}),"\n",(0,i.jsx)(n.hr,{})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(h,{...e})}):h(e)}},5492:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/jko-function-env-2-c4251d9d2c2dda40e8c65c84b0c0b9d1.png"},6502:(e,n,r)=>{r.d(n,{A:()=>i});var s=r(4848);function i(e){return(0,s.jsx)("pre",{tabIndex:0,className:"jko-code prism-code language-powershell thin-scrollbar",children:(0,s.jsx)("code",{children:e.children})})}},8070:(e,n,r)=>{r.d(n,{A:()=>i});var s=r(4848);function i(e){return(0,s.jsx)("pre",{tabIndex:0,className:"jko-code prism-code language-powershell thin-scrollbar",children:(0,s.jsxs)("code",{children:[(0,s.jsx)("span",{className:"jko-cli-symbol",children:"$"}),"\xa0",(0,s.jsx)("span",{className:"jko-cli",children:"jko"}),"\xa0",e.options&&e.options.map((e=>"separator"!==e?(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"jko-cli-option-operator",children:e.prefix}),(0,s.jsx)("span",{className:"jko-cli-option-name",children:e.name}),e.value&&(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"jko-cli-option-operator",children:"="}),(0,s.jsx)("span",{className:"jko-cli-option-value",children:e.value})]}),"\xa0"]}):(0,s.jsx)("span",{className:"jko-cli-option-separator",children:"...\xa0"}))),e.scriptName&&(0,s.jsxs)("span",{className:"jko-cli-script",children:[e.scriptName,"\xa0"]}),e.args&&("string"!=typeof e.args?e.args.map((e=>"separator"!==e?(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"jko-cli-arg",children:e}),"\xa0"]}):(0,s.jsx)("span",{className:"jko-cli-option-separator",children:"...\xa0"}))):(0,s.jsxs)("span",{className:"jko-cli-arg",children:[e.args,"\xa0"]}))]})})}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var s=r(6540);const i={},t=s.createContext(i);function c(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),s.createElement(t.Provider,{value:n},e.children)}},9055:(e,n,r)=>{r.d(n,{A:()=>s});const s=r.p+"assets/images/jko-function-env-1-0343b4861259beb4385eb9b9c0ddae88.png"}}]);