"use strict";(self.webpackChunkjko_doc=self.webpackChunkjko_doc||[]).push([[174],{4880:(n,e,i)=>{i.r(e),i.d(e,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"usage/functions/chaining-function-script","title":"Chaining Function Scripts","description":"Steps to Chain Function Scripts","source":"@site/docs/usage/functions/chaining-function-script.mdx","sourceDirName":"usage/functions","slug":"/usage/functions/chaining-function-script","permalink":"/usage/functions/chaining-function-script","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2,"description":"Steps to Chain Function Scripts","keywords":["chaining scripts","chained scripts","chaining function scripts","chained function scripts"]},"sidebar":"tutorialSidebar","previous":{"title":"Function Scripts","permalink":"/usage/functions/run-function-script"},"next":{"title":"Environment","permalink":"/usage/environment"}}');var a=i(4848),t=i(8453);i(8070),i(6502);const r={sidebar_position:2,description:"Steps to Chain Function Scripts",keywords:["chaining scripts","chained scripts","chaining function scripts","chained function scripts"]},o="Chaining Function Scripts",c={},l=[{value:"How is the return value handled",id:"how-is-the-return-value-handled",level:2},{value:"Example 1: A non\u2011string value is returned",id:"example-1-a-nonstring-value-is-returned",level:3},{value:"Example 2: A string value is returned",id:"example-2-a-string-value-is-returned",level:3},{value:"Chaining Function Script Calls",id:"chaining-function-script-calls",level:2},{value:"When It Stops?",id:"when-it-stops",level:2},{value:"Arguments",id:"arguments",level:2},{value:"Passing values between Scripts",id:"passing-values-between-scripts",level:2},{value:"Using the Environment",id:"using-the-environment",level:3},{value:"Example 1: Using Custom Environment Variables in a function script",id:"example-1-using-custom-environment-variables-in-a-function-script",level:4},{value:"Example 2: Using Custom Environment Variables in a traditional script",id:"example-2-using-custom-environment-variables-in-a-traditional-script",level:4},{value:"Using Local Variables",id:"using-local-variables",level:3},{value:"Example: Using Local Variables in a function script",id:"example-using-local-variables-in-a-function-script",level:4}];function p(n){const e={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...n.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(e.header,{children:(0,a.jsx)(e.h1,{id:"chaining-function-scripts",children:"Chaining Function Scripts"})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"how-is-the-return-value-handled",children:"How is the return value handled"}),"\n",(0,a.jsx)(e.p,{children:"If the function returns a value and that value is not a string, nothing happens; the value is ignored."}),"\n",(0,a.jsxs)(e.p,{children:["However, if the return value is a string, ",(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"jko"})})," will search for a script with that name and execute it."]}),"\n",(0,a.jsx)(e.p,{children:"Let's check following examples."}),"\n",(0,a.jsx)(e.h3,{id:"example-1-a-nonstring-value-is-returned",children:"Example 1: A non\u2011string value is returned"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        const result = a + b\n        console.log(`${a} + ${b} = ${result}`)\n        return result\n      }\n    }\n  }\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-powershell",children:"$ jko functionScript 1 2\n$ 1 + 2 = 3\n"})}),"\n",(0,a.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,a.jsx)(e.code,{children:"jko -l=e functionScript 1 2"}),")"]}),"\n",(0,a.jsx)(e.p,{children:"Nothing additional happens."}),"\n",(0,a.jsx)(e.h3,{id:"example-2-a-string-value-is-returned",children:"Example 2: A string value is returned"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        const result = a + b\n        console.log(`${a} + ${b} = ${result}`)\n        return result < 0 ? 'negative' : 'positive'\n      },\n      negative: 'echo It was negative.',\n      positive: 'echo It was positive.'\n    }\n  }\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-powershell",children:"$ jko functionScript 1 2\n$ 1 + 2 = 3\n$ It was positive.\n$ jko functionScript -2 1\n$ -2 + 1 = -1\n$ It was negative.\n"})}),"\n",(0,a.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,a.jsx)(e.code,{children:"jko -l=e functionScript 1 2"}),")"]}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"negative"})," script is executed by ",(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"jko"})})," when ",(0,a.jsx)(e.code,{children:"result"})," is negative."]}),"\n",(0,a.jsxs)(e.li,{children:[(0,a.jsx)(e.code,{children:"positive"})," script is executed by ",(0,a.jsx)(e.strong,{children:(0,a.jsx)(e.code,{children:"jko"})})," when ",(0,a.jsx)(e.code,{children:"result"})," is positive or 0."]}),"\n"]}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"chaining-function-script-calls",children:"Chaining Function Script Calls"}),"\n",(0,a.jsx)(e.p,{children:"Chaining function script calls occurs when a function script returns the name of another function script."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        console.log(`${a} + ${b} = ${a + b}`)\n        return 'show'\n      },\n      show: function() {\n        console.log(`at ${new Date()}`)\n        return 'done'\n      },\n      done: function() {\n        console.log('Done!')\n      }\n    }\n  }\n"})}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["Function Script ",(0,a.jsx)(e.code,{children:"functionScript"})," calls Function Script ",(0,a.jsx)(e.code,{children:"show"}),"."]}),"\n",(0,a.jsxs)(e.li,{children:["Function Script ",(0,a.jsx)(e.code,{children:"show"})," calls Function Script ",(0,a.jsx)(e.code,{children:"done"}),"."]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"This chaining can go on and on."}),"\n",(0,a.jsx)(e.admonition,{type:"tip",children:(0,a.jsx)(e.p,{children:"Chained function scripts runs faster than Chained commands."})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"when-it-stops",children:"When It Stops?"}),"\n",(0,a.jsx)(e.p,{children:"Chaining can continue indefinitely. It stops when:"}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["the ",(0,a.jsx)("u",{children:"function script"})," does not return a value or return a non-string value, or"]}),"\n",(0,a.jsxs)(e.li,{children:["the last script in the chain is a ",(0,a.jsx)("u",{children:"traditional script"}),"."]}),"\n"]}),"\n",(0,a.jsx)(e.p,{children:"e.g."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        console.log(`${a} + ${b} = ${a + b}`)\n        return 'show'\n      },\n      show: function() {\n        console.log(`at ${new Date()}`)\n        return 'done'\n      },\n      done: function() {\n        console.log('Done!')\n      }\n    }\n  }\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Since the function script ",(0,a.jsx)(e.code,{children:"done"})," returns no value, the chaining stops."]}),"\n",(0,a.jsx)(e.p,{children:"e.g."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        console.log(`${a} + ${b} = ${a + b}`)\n        return 'show'\n      },\n      show: function() {\n        console.log(`at ${new Date()}`)\n        return 'done'\n      },\n      done: 'echo Done!',\n    }\n  }\n"})}),"\n",(0,a.jsxs)(e.p,{children:["Since ",(0,a.jsx)(e.code,{children:"done"})," is a traditional script, the chaining stops."]}),"\n",(0,a.jsx)(e.admonition,{type:"note",children:(0,a.jsxs)(e.p,{children:["If the chain includes a ",(0,a.jsx)("u",{children:"traditional script"}),", that script will always be the final one."]})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"arguments",children:"Arguments"}),"\n",(0,a.jsx)(e.p,{children:"When chaining function scripts, the initial arguments are available to every function script in the chain."}),"\n",(0,a.jsx)(e.p,{children:"e.g."}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      operation1: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        console.log(`${a} + ${b} = ${a + b}`)\n        return 'operation2'\n      },\n      operation2: function(param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        console.log(`${a} - ${b} = ${a - b}`)\n        return 'operation3'\n      },\n      operation3: function(param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        console.log(`${a} * ${b} = ${a * b}`)\n        return 'done'\n      },\n      done: 'echo Done!'\n    }\n  }\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-powershell",children:"$ jko operation1 1.2 3.4\n$ 1.2 + 3.4 = 4.6\n$ 1.2 - 3.4 = -2.2\n$ 1.2 * 3.4 = 4.08\n$ Done!\n"})}),"\n",(0,a.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,a.jsx)(e.code,{children:"jko -l=e functionScript 1 2"}),")"]}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:["Note that the argument-sharing mechanism for chained function scripts differs from the ",(0,a.jsx)(e.a,{href:"./run-function-script#run-a-function-script-with-arguments",children:(0,a.jsx)(e.code,{children:"jko_arg_#"})})," values provided by the environment. While ",(0,a.jsx)(e.a,{href:"../environment",children:"environment variables"})," are shared among all descendant processes, the initial arguments are only available within the chain of function scripts"]})}),"\n",(0,a.jsx)(e.hr,{}),"\n",(0,a.jsx)(e.h2,{id:"passing-values-between-scripts",children:"Passing values between Scripts"}),"\n",(0,a.jsx)(e.h3,{id:"using-the-environment",children:"Using the Environment"}),"\n",(0,a.jsx)(e.p,{children:"If you need to pass values between scripts, you can set custom environment variables.\nThese variables will be available to the next script invoked by the function script\u2014whether it\u2019s a traditional script or another function script."}),"\n",(0,a.jsxs)(e.ul,{children:["\n",(0,a.jsxs)(e.li,{children:["In a function script, use ",(0,a.jsx)(e.code,{children:"process.your_custom_env_var"}),"."]}),"\n",(0,a.jsxs)(e.li,{children:["In a traditional script, you can access them via ",(0,a.jsx)(e.code,{children:"$your_custom_env_var"}),";"]}),"\n"]}),"\n",(0,a.jsx)(e.h4,{id:"example-1-using-custom-environment-variables-in-a-function-script",children:"Example 1: Using Custom Environment Variables in a function script"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        // Set a custom environment variable, in this case called `jko_return_0`.\n        process.env.jko_return_0 = `${a} + ${b} = ${a + b}`\n        return 'show'\n      },\n      show:  function() {\n        // Access custom environment variable\n        console.log(process.env.jko_return_0)\n      }\n    }\n  }\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-powershell",children:"$ jko functionScript 1 2\n$ 1 + 2 = 3\n"})}),"\n",(0,a.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,a.jsx)(e.code,{children:"jko -l=e functionScript 1 2"}),")"]}),"\n",(0,a.jsx)(e.h4,{id:"example-2-using-custom-environment-variables-in-a-traditional-script",children:"Example 2: Using Custom Environment Variables in a traditional script"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        // Set a custom environment variable, in this case called `jko_return_0`.\n        process.env.jko_return_0 = `${a} + ${b} = ${a + b}`\n        return 'show'\n      },\n      show: 'echo $jko_return_0', // Access custom environment variable\n    }\n  }\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-powershell",children:"$ jko functionScript 1 2\n$ 1 + 2 = 3\n"})}),"\n",(0,a.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,a.jsx)(e.code,{children:"jko -l=e functionScript 1 2"}),")"]}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:["Every value that is passed through an environment variable is automatically ",(0,a.jsx)(e.strong,{children:"converted into a string"}),"."]})}),"\n",(0,a.jsx)(e.h3,{id:"using-local-variables",children:"Using Local Variables"}),"\n",(0,a.jsxs)(e.p,{children:["When chaining ",(0,a.jsx)("u",{children:"function scripts"})," from the ",(0,a.jsx)(e.strong,{children:"same module"}),", you can use local variables to share information between them."]}),"\n",(0,a.jsx)(e.h4,{id:"example-using-local-variables-in-a-function-script",children:"Example: Using Local Variables in a function script"}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-javascript",children:"  let jkoReturn0\n  export default {\n    scripts: {\n      functionScript: function (param1, param2) {\n        const a = parseFloat(param1)\n        const b = parseFloat(param2)\n        // Set local variable\n        jkoReturn0 = `${a} + ${b} = ${a + b}`\n        return 'show'\n      },\n      show:  function() {\n        // Access local variable\n        console.log(jkoReturn0)\n      }\n    }\n  }\n"})}),"\n",(0,a.jsx)(e.pre,{children:(0,a.jsx)(e.code,{className:"language-powershell",children:"$ jko functionScript 1 2\n$ 1 + 2 = 3\n"})}),"\n",(0,a.jsxs)("p",{class:"small",children:["(Actually, the output will be longer, but it has been simplified to emphasize functionality over presentation. To get the exact same output as in the example, use the following command: ",(0,a.jsx)(e.code,{children:"jko -l=e functionScript 1 2"}),")"]}),"\n",(0,a.jsx)(e.admonition,{type:"warning",children:(0,a.jsxs)(e.p,{children:["Since scripts are preprocessed, this approach ",(0,a.jsxs)(e.strong,{children:["doesn't work with ",(0,a.jsx)("u",{children:"traditional scripts"})]}),". When the script is called, it reflects only the value that was initially set."]})}),"\n",(0,a.jsx)(e.hr,{})]})}function h(n={}){const{wrapper:e}={...(0,t.R)(),...n.components};return e?(0,a.jsx)(e,{...n,children:(0,a.jsx)(p,{...n})}):p(n)}},6502:(n,e,i)=>{i.d(e,{A:()=>a});var s=i(4848);function a(n){return(0,s.jsx)("pre",{tabIndex:0,className:"jko-code prism-code language-powershell thin-scrollbar",children:(0,s.jsx)("code",{children:n.children})})}},8070:(n,e,i)=>{i.d(e,{A:()=>a});var s=i(4848);function a(n){return(0,s.jsx)("pre",{tabIndex:0,className:"jko-code prism-code language-powershell thin-scrollbar",children:(0,s.jsxs)("code",{children:[(0,s.jsx)("span",{className:"jko-cli-symbol",children:"$"}),"\xa0",(0,s.jsx)("span",{className:"jko-cli",children:"jko"}),"\xa0",n.options&&n.options.map((n=>"separator"!==n?(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"jko-cli-option-operator",children:n.prefix}),(0,s.jsx)("span",{className:"jko-cli-option-name",children:n.name}),n.value&&(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"jko-cli-option-operator",children:"="}),(0,s.jsx)("span",{className:"jko-cli-option-value",children:n.value})]}),"\xa0"]}):(0,s.jsx)("span",{className:"jko-cli-option-separator",children:"...\xa0"}))),n.scriptName&&(0,s.jsxs)("span",{className:"jko-cli-script",children:[n.scriptName,"\xa0"]}),n.args&&("string"!=typeof n.args?n.args.map((n=>"separator"!==n?(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)("span",{className:"jko-cli-arg",children:n}),"\xa0"]}):(0,s.jsx)("span",{className:"jko-cli-option-separator",children:"...\xa0"}))):(0,s.jsxs)("span",{className:"jko-cli-arg",children:[n.args,"\xa0"]}))]})})}},8453:(n,e,i)=>{i.d(e,{R:()=>r,x:()=>o});var s=i(6540);const a={},t=s.createContext(a);function r(n){const e=s.useContext(t);return s.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(a):n.components||a:r(n.components),s.createElement(t.Provider,{value:e},n.children)}}}]);