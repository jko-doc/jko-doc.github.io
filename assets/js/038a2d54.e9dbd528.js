"use strict";(self.webpackChunkjko_doc=self.webpackChunkjko_doc||[]).push([[120],{1623:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"usage/declarative/nesting","title":"nesting","description":"How to nest directives?","source":"@site/docs/usage/declarative/nesting.mdx","sourceDirName":"usage/declarative","slug":"/usage/declarative/nesting","permalink":"/usage/declarative/nesting","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"hide_title":true,"sidebar_label":"Nesting","sidebar_position":5,"description":"How to nest directives?","keywords":["nesting","combining"]},"sidebar":"tutorialSidebar","previous":{"title":"$comment","permalink":"/usage/declarative/comment"},"next":{"title":"Grouping Scripts Definition","permalink":"/usage/declarative/grouping"}}');var s=t(4848),o=t(8453);const i={hide_title:!0,sidebar_label:"Nesting",sidebar_position:5,description:"How to nest directives?",keywords:["nesting","combining"]},c=void 0,a={},l=[{value:"Nesting",id:"nesting",level:2}];function d(e){const n={code:"code",h2:"h2",hr:"hr",p:"p",pre:"pre",...(0,o.R)(),...e.components},{Details:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"nesting",children:"Nesting"}),"\n",(0,s.jsx)(n.p,{children:"Directives can be nested to define different structures as required:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export default {\n  scripts: {\n    // highlight-next-line\n    "$catch ($pre (yourScript))": "someCommand0",\n    "$pre (yourScript)": "someCommand1",\n    "yourScript": "someCommand2",\n    "$post (yourScript)": "someCommand3"\n    // highlight-next-line\n    "$post ($pre (yourScript))": "someCommand4"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can disable scripts defined with directives:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export default {\n  scripts: {\n    // highlight-next-line\n    "$disable ($catch ($pre (yourScript)))": "someCommand0",\n    "$pre (yourScript)": "someCommand1",\n    "yourScript": "someCommand2",\n    // highlight-next-line\n    "$disable ($post (yourScript))": "someCommand3"\n    "$post ($pre (yourScript))": "someCommand4"\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"You can add comments to scripts defined with directives:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:'export default {\n  scripts: {\n    "$pre (yourScript)": "someCommand0",\n    // highlight-next-line\n    "$comment ($pre (yourScript))": "This script will ..."\n    "yourScript": "someCommand",\n  }\n}\n'})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(t,{children:[(0,s.jsx)("summary",{children:"An Example"}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-javascript",children:"  import { styleText } from 'node:util'\n\n  function combine(letters) {\n    const result = []\n    for(const letter1 of letters)\n      for(const letter2 of letters) {\n        result.push(`${letter1}${letter2}`)\n        for(const letter3 of letters)\n          result.push(`${letter1}${letter2}${letter3}`)\n      }\n    return result\n  }\n\n  const near = new Map([\n    ['q', 'qwa'], ['w', 'wqase'], ['e', 'ewsdr'], ['r', 'redft'], ['t', 'trfgy'], ['y', 'ytghu'],\n    ['u','uyhji'], ['i','iujko'], ['o', 'oiklp'], ['p', 'pol'], ['a', 'aqwsz'], ['s', 'sqazxdew'],\n    ['d', 'dwsxcfre'], ['f', 'fedcvgtr'], ['g', 'grfvbhyt'], ['h', 'htgbjuy'], ['j', 'jyhnmkiu'],\n    ['k', 'kujmloi'], ['l', 'lpok'], ['z', 'zxsa'], ['x', 'xcdsz'], ['c', 'cxdfv'], ['v', 'vcfgb'],\n    ['b', 'bvghn'], ['n', 'nbhjm'], ['m', 'mnjk']\n\n  ])\n\n  function combineNear(letters) {\n    const result = []\n    for(const letter1 of letters) {\n      const neighbor1 = near.get(letter1)\n      for(const letter2 of letters)\n        if (neighbor1.indexOf(letter2) !== -1) {\n          result.push(`${letter1}${letter2}`)\n          const neighbor2 = near.get(letter2)\n          for(const letter3 of letters)\n            if (neighbor1.indexOf(letter3) !== -1 || neighbor2.indexOf(letter3) !== -1)\n              result.push(`${letter1}${letter2}${letter3}`)\n        }\n    }\n    return result\n  }\n\n  function find(arg1, combiner) {\n    console.log(`from: ${arg1}`)\n    const permutations = combiner(arg1)\n    console.log(`time: ~${(permutations.length / 20).toFixed(2)} minutes`)\n    process.env.check_list = JSON.stringify(permutations)\n    return \"start\"\n  }\n  const all = 'qwertyuiopasdfghjklzxcvbnm'\n\n  export default {\n    scripts: {\n      \"find-near\": (arg1) => find(arg1, combineNear),\n      find: (arg1) => find(arg1, combine),\n      \"find-all-near\": () => find(all, combineNear),\n      \"find-all\": () => find(all, combine),\n      iterate: (index, from) => {\n        const n = parseInt(index)\n        const letters = JSON.parse(from)\n        const length = letters.length\n        n != 0 && process.stdout.write(` | ${n}/${length} (${((length - n) / 20).toFixed(2)} m) > `)\n        process.env.check_name = letters[n]\n        process.env.check_list = from\n        process.env.check_n = n + 1\n        return n < length ? \"check\" : \"end\"\n      },\n      start: 'echo -n [ \\\\\"\\\\\"> available.json && echo -n [ \\\\\"\\\\\" > used.json && jko -l=e iterate 0 $check_list',\n      end: \"echo ] >> available.json && echo ] >> used.json\",\n      checkName: \"npm info $jko_arg_0 1>/dev/null 2>/dev/null\",\n      \"$post (checkName)\": function (arg1) {\n        process.stdout.write(`${styleText('red', 'Used:')}${arg1}`)\n      },\n      \"$post ($post (checkName))\": 'echo -n ,\\\\\"$jko_arg_0\\\\\" >> used.json',\n      \"$catch (checkName)\": function (arg1) {\n        process.stdout.write(`${styleText('green', '********* Found: ')}${styleText('bold', arg1)}${styleText('green', ' *********')}`)\n      },\n      \"$post ($catch (checkName))\": 'echo -n ,\\\\\"$jko_arg_0\\\\\" >> available.json',\n      check: \"sleep 1.5 && jko -l=e checkName $check_name && jko -l=e iterate $check_n $check_list\"\n    }\n  }\n"})})]})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var r=t(6540);const s={},o=r.createContext(s);function i(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);